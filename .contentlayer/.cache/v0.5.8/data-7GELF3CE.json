{
  "cacheItemsMap": {
    "projects/flappy-bird-embedded.mdx": {
      "document": {
        "title": "Reaction-Time Flappy Bird Game (Embedded Systems)",
        "slug": "flappy-bird-embedded",
        "summary": "Real-time Flappy Bird-style game implemented on Terasic DE10-Standard SoC FPGA board, demonstrating embedded hardware/software co-design with C, Verilog, and AXI-Lite communication.",
        "role": "Embedded Systems Developer",
        "dates": "January 2024 – March 2024",
        "tech": [
          "C (HPS)",
          "Verilog",
          "Quartus Prime",
          "Platform Designer (Qsys)",
          "GCC Toolchain",
          "AXI-Lite",
          "SPI Communication"
        ],
        "status": "In Development",
        "heroImage": "/images/projects/FlappyBirdDE10LCDv1.jpg",
        "repoUrl": "https://github.com/DanielAndi/FlappyBirdDE10LCDv1",
        "featured": true,
        "tags": [
          "embedded-systems",
          "fpga",
          "verilog",
          "c",
          "hardware-design",
          "real-time-systems\r"
        ],
        "body": {
          "raw": "\r\n# Project Overview\r\n\r\n> **🎮 Embedded Gaming System**\r\n> \r\n> This project implements a reaction-based \"Flappy Bird\"–style game on the Terasic DE10-Standard SoC FPGA board, demonstrating embedded hardware/software co-design. The game challenges players to control a bird navigating through dynamically generated obstacles using physical push buttons, switches, and real-time visual feedback.\r\n> \r\n> The system showcases the integration of real-time embedded software, digital logic design, and system-on-chip architecture, serving as a capstone example of embedded co-design principles.\r\n\r\n## 🎯 Key Features\r\n\r\n- **Hardware/Software Co-Design:** HPS executes game logic while FPGA manages low-level I/O operations\r\n\r\n- **Real-Time Performance:** 60 Hz gameplay loop with consistent frame rate and deterministic timing\r\n\r\n- **Multi-Domain Communication:** AXI-Lite register interface enables seamless HPS↔FPGA synchronization\r\n\r\n- **Hardware Input Processing:** Debounced inputs, LED indicators, and 7-segment display updates\r\n\r\n- **Visual Feedback System:** 128×64 SPI LCD display with PWM-based backlight control\r\n\r\n- **Collision Detection:** Real-time physics with scoring and adjustable difficulty via board switches\r\n\r\n---\r\n\r\n# 🏗️ Technical Architecture\r\n\r\n## 🔧 Hardware Platform\r\n\r\n- **Terasic DE10-Standard:** Intel Cyclone V SoC FPGA with dual-core ARM Cortex-A9 HPS\r\n- **Display:** 128×64 SPI LCD for game rendering\r\n- **Input/Output:** Push buttons, slide switches, user LEDs, 7-segment display\r\n\r\n## 💻 Software Stack\r\n\r\n- **HPS Domain:** C programming for game logic, physics, and rendering loop\r\n- **FPGA Domain:** Verilog for low-level I/O management and register interface\r\n- **Development Tools:** Quartus Prime, Platform Designer (Qsys), GCC toolchain\r\n\r\n## 🔄 System Architecture\r\n\r\n```\r\nHPS (C) ←→ AXI-Lite Bridge ←→ FPGA (Verilog)\r\n    ↓                              ↓\r\nGame Logic & Physics          I/O Management\r\nRendering Loop (60Hz)         Input Debouncing\r\nSPI LCD Output               LED Control\r\n                           7-Segment Display\r\n                           PWM Backlight\r\n```\r\n\r\n## 📡 Communication Protocol\r\n\r\n- **Shared Registers:** Synchronized game states between HPS and FPGA domains\r\n- **AXI-Lite Interface:** Low-latency communication for real-time control\r\n- **SPI Communication:** High-speed LCD frame buffer updates\r\n\r\n---\r\n\r\n# 🎮 Game Implementation\r\n\r\n## 🎯 Core Gameplay\r\n\r\n- **Reaction-Based Control:** Player uses push buttons to control bird movement\r\n- **Dynamic Obstacles:** Procedurally generated pipes with adjustable difficulty\r\n- **Real-Time Physics:** Collision detection and scoring system\r\n- **Visual Feedback:** LED indicators and 7-segment display for game state\r\n\r\n## ⚡ Performance Optimization\r\n\r\n- **Hardware-Timed Loop:** Consistent 60 Hz frame rate with deterministic timing\r\n- **Efficient Rendering:** Optimized SPI communication for smooth graphics\r\n- **Low-Latency Input:** Hardware-based input debouncing for responsive controls\r\n\r\n## 🧪 Testing & Validation\r\n\r\n- **Structured Test Plan:** Comprehensive validation of HPS↔FPGA communication\r\n- **Frame Integrity Testing:** Verification of SPI rendering and display output\r\n- **Collision Logic Testing:** Systematic validation of game physics\r\n- **System Responsiveness:** Performance testing under various load conditions\r\n\r\n---\r\n\r\n# 🎯 Impact & Outcomes\r\n\r\n## ✅ Technical Achievements\r\n\r\n- **Successful Integration:** Seamless HPS and FPGA domain communication via AXI-Lite\r\n- **Real-Time Performance:** Achieved consistent 60 Hz gameplay with hardware timing\r\n- **Hardware Optimization:** Efficient I/O management with debounced inputs and PWM control\r\n- **System Reliability:** Robust error handling and deterministic timing across domains\r\n\r\n## 🌟 Key Learning Outcomes\r\n\r\n- **FPGA Development:** Digital logic design and Verilog programming for embedded systems\r\n- **HPS Interfacing:** ARM Cortex-A9 programming and system integration\r\n- **AXI Bridge Communication:** Low-level hardware communication protocols\r\n- **Embedded Co-Design:** Integration of software and hardware domains in SoC architecture\r\n- **Real-Time Systems:** Deterministic timing and performance optimization for embedded applications\r\n\r\n## 🔧 Technical Skills Demonstrated\r\n\r\n- **Hardware Description Languages:** Verilog for FPGA logic implementation\r\n- **Embedded C Programming:** Real-time systems programming on ARM architecture\r\n- **System Integration:** SoC design and inter-domain communication\r\n- **Hardware Debugging:** Low-level system testing and validation methodologies\r\n\r\n---\r\n\r\n> **💡 Project Significance**\r\n> \r\n> This embedded systems project demonstrates mastery of hardware/software co-design principles, showcasing the integration of real-time embedded software with digital logic design. The Flappy Bird implementation serves as a comprehensive example of SoC architecture, AXI communication protocols, and embedded systems development, highlighting expertise in FPGA programming, HPS interfacing, and real-time system optimization.\r\n",
          "code": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),P=(i,e)=>{for(var r in e)l(i,r,{get:e[r],enumerable:!0})},a=(i,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!y.call(i,t)&&t!==r&&l(i,t,{get:()=>e[t],enumerable:!(o=g(e,t))||o.enumerable});return i};var b=(i,e,r)=>(r=i!=null?m(u(i)):{},a(e||!i||!i.__esModule?l(r,\"default\",{value:i,enumerable:!0}):r,i)),w=i=>a(l({},\"__esModule\",{value:!0}),i);var c=f((I,d)=>{d.exports=_jsx_runtime});var C={};P(C,{default:()=>h,frontmatter:()=>S});var n=b(c()),S={slug:\"flappy-bird-embedded\",title:\"Reaction-Time Flappy Bird Game (Embedded Systems)\",summary:\"Real-time Flappy Bird-style game implemented on Terasic DE10-Standard SoC FPGA board, demonstrating embedded hardware/software co-design with C, Verilog, and AXI-Lite communication.\",role:\"Embedded Systems Developer\",dates:\"January 2024 \\u2013 March 2024\",tech:[\"C (HPS)\",\"Verilog\",\"Quartus Prime\",\"Platform Designer (Qsys)\",\"GCC Toolchain\",\"AXI-Lite\",\"SPI Communication\"],status:\"In Development\",heroImage:\"/images/projects/FlappyBirdDE10LCDv1.jpg\",repoUrl:\"https://github.com/DanielAndi/FlappyBirdDE10LCDv1\",featured:!0,tags:[\"embedded-systems\",\"fpga\",\"verilog\",\"c\",\"hardware-design\",\"real-time-systems\"]};function s(i){let e={blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Project Overview\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"\\u{1F3AE} Embedded Gaming System\"})}),`\n`,(0,n.jsx)(e.p,{children:'This project implements a reaction-based \"Flappy Bird\"\\u2013style game on the Terasic DE10-Standard SoC FPGA board, demonstrating embedded hardware/software co-design. The game challenges players to control a bird navigating through dynamically generated obstacles using physical push buttons, switches, and real-time visual feedback.'}),`\n`,(0,n.jsx)(e.p,{children:\"The system showcases the integration of real-time embedded software, digital logic design, and system-on-chip architecture, serving as a capstone example of embedded co-design principles.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F3AF} Key Features\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Hardware/Software Co-Design:\"}),\" HPS executes game logic while FPGA manages low-level I/O operations\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Real-Time Performance:\"}),\" 60 Hz gameplay loop with consistent frame rate and deterministic timing\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Multi-Domain Communication:\"}),\" AXI-Lite register interface enables seamless HPS\\u2194FPGA synchronization\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Hardware Input Processing:\"}),\" Debounced inputs, LED indicators, and 7-segment display updates\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Visual Feedback System:\"}),\" 128\\xD764 SPI LCD display with PWM-based backlight control\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Collision Detection:\"}),\" Real-time physics with scoring and adjustable difficulty via board switches\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h1,{children:\"\\u{1F3D7}\\uFE0F Technical Architecture\"}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F527} Hardware Platform\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Terasic DE10-Standard:\"}),\" Intel Cyclone V SoC FPGA with dual-core ARM Cortex-A9 HPS\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Display:\"}),\" 128\\xD764 SPI LCD for game rendering\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Input/Output:\"}),\" Push buttons, slide switches, user LEDs, 7-segment display\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F4BB} Software Stack\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"HPS Domain:\"}),\" C programming for game logic, physics, and rendering loop\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"FPGA Domain:\"}),\" Verilog for low-level I/O management and register interface\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Development Tools:\"}),\" Quartus Prime, Platform Designer (Qsys), GCC toolchain\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F504} System Architecture\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`HPS (C) \\u2190\\u2192 AXI-Lite Bridge \\u2190\\u2192 FPGA (Verilog)\\r\n    \\u2193                              \\u2193\\r\nGame Logic & Physics          I/O Management\\r\nRendering Loop (60Hz)         Input Debouncing\\r\nSPI LCD Output               LED Control\\r\n                           7-Segment Display\\r\n                           PWM Backlight\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F4E1} Communication Protocol\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Shared Registers:\"}),\" Synchronized game states between HPS and FPGA domains\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AXI-Lite Interface:\"}),\" Low-latency communication for real-time control\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"SPI Communication:\"}),\" High-speed LCD frame buffer updates\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h1,{children:\"\\u{1F3AE} Game Implementation\"}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F3AF} Core Gameplay\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Reaction-Based Control:\"}),\" Player uses push buttons to control bird movement\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Dynamic Obstacles:\"}),\" Procedurally generated pipes with adjustable difficulty\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Real-Time Physics:\"}),\" Collision detection and scoring system\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Visual Feedback:\"}),\" LED indicators and 7-segment display for game state\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u26A1 Performance Optimization\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Hardware-Timed Loop:\"}),\" Consistent 60 Hz frame rate with deterministic timing\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Efficient Rendering:\"}),\" Optimized SPI communication for smooth graphics\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Low-Latency Input:\"}),\" Hardware-based input debouncing for responsive controls\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F9EA} Testing & Validation\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Structured Test Plan:\"}),\" Comprehensive validation of HPS\\u2194FPGA communication\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Frame Integrity Testing:\"}),\" Verification of SPI rendering and display output\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Collision Logic Testing:\"}),\" Systematic validation of game physics\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"System Responsiveness:\"}),\" Performance testing under various load conditions\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h1,{children:\"\\u{1F3AF} Impact & Outcomes\"}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u2705 Technical Achievements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Successful Integration:\"}),\" Seamless HPS and FPGA domain communication via AXI-Lite\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Real-Time Performance:\"}),\" Achieved consistent 60 Hz gameplay with hardware timing\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Hardware Optimization:\"}),\" Efficient I/O management with debounced inputs and PWM control\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"System Reliability:\"}),\" Robust error handling and deterministic timing across domains\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F31F} Key Learning Outcomes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"FPGA Development:\"}),\" Digital logic design and Verilog programming for embedded systems\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"HPS Interfacing:\"}),\" ARM Cortex-A9 programming and system integration\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AXI Bridge Communication:\"}),\" Low-level hardware communication protocols\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Embedded Co-Design:\"}),\" Integration of software and hardware domains in SoC architecture\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Real-Time Systems:\"}),\" Deterministic timing and performance optimization for embedded applications\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F527} Technical Skills Demonstrated\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Hardware Description Languages:\"}),\" Verilog for FPGA logic implementation\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Embedded C Programming:\"}),\" Real-time systems programming on ARM architecture\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"System Integration:\"}),\" SoC design and inter-domain communication\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Hardware Debugging:\"}),\" Low-level system testing and validation methodologies\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"\\u{1F4A1} Project Significance\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This embedded systems project demonstrates mastery of hardware/software co-design principles, showcasing the integration of real-time embedded software with digital logic design. The Flappy Bird implementation serves as a comprehensive example of SoC architecture, AXI communication protocols, and embedded systems development, highlighting expertise in FPGA programming, HPS interfacing, and real-time system optimization.\"}),`\n`]})]})}function h(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(s,{...i})}):s(i)}return w(C);})();\n;return Component;"
        },
        "_id": "projects/flappy-bird-embedded.mdx",
        "_raw": {
          "sourceFilePath": "projects/flappy-bird-embedded.mdx",
          "sourceFileName": "flappy-bird-embedded.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/flappy-bird-embedded"
        },
        "type": "Project",
        "url": "/projects/flappy-bird-embedded"
      },
      "documentHash": "1761227402835",
      "hasWarnings": false,
      "documentTypeName": "Project"
    },
    "projects/phytopi-controlled-environment.mdx": {
      "document": {
        "title": "Phytopi Controlled Environment Platform",
        "slug": "phytopi-controlled-environment",
        "summary": "Autonomous plant growth monitoring system using Raspberry Pi, Flutter apps, Supabase telemetry, and ML-based plant health insights.",
        "role": "Software and ML Lead",
        "dates": "September 2025 – April 2026",
        "tech": [
          "Raspberry Pi 5",
          "Flutter",
          "Supabase",
          "Next.js",
          "TypeScript",
          "TensorFlow Lite",
          "GitHub Actions"
        ],
        "status": "In Development",
        "heroImage": "/images/projects/phytopi-dashboard.jpg",
        "repoUrl": "https://github.com/DanielAndi/PhytoPi",
        "featured": true,
        "tags": [
          "iot",
          "flutter",
          "supabase",
          "raspberry-pi",
          "ml\r"
        ],
        "body": {
          "raw": "\r\n# Project Overview\r\n\r\n> **🌱 Smart IoT Ecosystem**\r\n> \r\n> PhytoPi is a smart IoT ecosystem designed to automate and monitor plant growth in controlled environments. The system integrates hardware sensors, Raspberry Pi control, cloud data management, and mobile/web applications to deliver real-time environmental insights and plant health analytics.\r\n> \r\n> The project's goal is to autonomously sustain a full bean plant growth cycle while providing users with live monitoring, alerts, and predictive analysis through a unified app interface.\r\n\r\n## 🎯 Key Features\r\n\r\n- **Environmental Monitoring:** Continuous data collection for soil moisture, temperature, humidity, light, and CO₂ sensors\r\n\r\n- **Secure Cloud Infrastructure:** Built on Supabase with Row-Level Security (RLS) for user-specific data isolation\r\n\r\n- **Cross-Platform Dashboard:** Flutter app (Android/iOS/Web) displays real-time readings, charts, and device health\r\n\r\n- **Alert System:** Automated notifications for threshold breaches (e.g., low moisture, high temperature)\r\n\r\n- **Offline-Resilient Device Agent:** Python-based Raspberry Pi agent caches data locally and uploads in batches\r\n\r\n- **AI Integration (Phase 2):** On-device TensorFlow Lite or cloud ML microservice for plant health inference\r\n\r\n- **Kiosk Mode:** Raspberry Pi can display live dashboards using Chromium in kiosk mode for lab or greenhouse use\r\n\r\n- **Monetization-Ready Architecture:** Stripe integration for subscription tiers and device management\r\n\r\n---\r\n\r\n# 🏗️ Technical Architecture\r\n\r\n## 🔧 Hardware Layer\r\n\r\n- **Raspberry Pi 5** + Sensor Array (moisture, temp, humidity, light, CO₂)\r\n\r\n- **Device Agent:** Python + SQLite for local buffering, secure upload to Supabase Edge Functions\r\n\r\n## ☁️ Backend Infrastructure\r\n\r\n- **Supabase:** PostgreSQL, RLS, Edge Functions, Storage, Auth\r\n\r\n- **CI/CD:** GitHub Actions for migrations, tests, and deployment\r\n\r\n## 📱 Frontend Applications\r\n\r\n- **Flutter:** Mobile + Web, realtime charts, user settings, notifications\r\n\r\n- **Kiosk Mode:** Raspberry Pi displays live dashboards using Chromium\r\n\r\n## 🔄 Data Flow\r\n\r\n```\r\nSensors → Pi Agent → Edge Function → Supabase DB → Realtime → Mobile/Web UI\r\n```\r\n\r\n---\r\n\r\n## 📁 Project Structure\r\n\r\n```\r\nphytopi/\r\n├─ apps/            # Flutter mobile + web dashboard clients\r\n├─ services/        # pi-agent, simulator, ml microservice\r\n├─ ml/              # training scripts, datasets, exported TFLite models\r\n├─ infra/           # Supabase migrations, edge functions, Docker assets\r\n├─ packages/        # shared DTOs, domain models, utilities\r\n├─ .github/workflows/# CI/CD pipelines\r\n└─ docs/            # requirements, diagrams, statements of work\r\n```\r\n\r\n# 🎯 Impact & Outcomes\r\n\r\n## ✅ Achievements\r\n\r\n- **Fully functional MVP** achieved within 12 weeks\r\n\r\n- **Cross-platform app** + Raspberry Pi kiosk mode tested with live sensors\r\n\r\n- **Secure, scalable Supabase backend** supporting realtime ingestion and notifications\r\n\r\n- **Architecture ready** for production and future AI health analysis\r\n\r\n## 🌟 Key Highlights\r\n\r\n- **End-to-end IoT system** with device onboarding, telemetry, and visualization\r\n\r\n- **Modular Supabase schema** designed for extensibility and manufacturing integration\r\n\r\n- **Demonstrates strong grasp** of IoT, cloud computing, mobile development, and embedded systems\r\n\r\n- **Deployed internal tests** using CI/CD pipelines and Supabase observability tools\r\n\r\n---\r\n\r\n> **💡 Vision Statement**\r\n> \r\n> PhytoPi represents a comprehensive IoT solution that bridges hardware, cloud infrastructure, and user experience to create an intelligent plant monitoring ecosystem. The project demonstrates expertise across the full technology stack while delivering a production-ready system with clear paths for AI integration and commercial scalability.",
          "code": "var Component=(()=>{var p=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var i in e)l(r,i,{get:e[i],enumerable:!0})},s=(r,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!b.call(r,t)&&t!==i&&l(r,t,{get:()=>e[t],enumerable:!(o=u(e,t))||o.enumerable});return r};var v=(r,e,i)=>(i=r!=null?p(g(r)):{},s(e||!r||!r.__esModule?l(i,\"default\",{value:r,enumerable:!0}):i,r)),S=r=>s(l({},\"__esModule\",{value:!0}),r);var c=y((k,a)=>{a.exports=_jsx_runtime});var P={};f(P,{default:()=>h,frontmatter:()=>w});var n=v(c()),w={slug:\"phytopi-controlled-environment\",title:\"Phytopi Controlled Environment Platform\",summary:\"Autonomous plant growth monitoring system using Raspberry Pi, Flutter apps, Supabase telemetry, and ML-based plant health insights.\",role:\"Software and ML Lead\",dates:\"September 2025 \\u2013 April 2026\",tech:[\"Raspberry Pi 5\",\"Flutter\",\"Supabase\",\"Next.js\",\"TypeScript\",\"TensorFlow Lite\",\"GitHub Actions\"],status:\"In Development\",heroImage:\"/images/projects/phytopi-dashboard.jpg\",repoUrl:\"https://github.com/DanielAndi/PhytoPi\",featured:!0,tags:[\"iot\",\"flutter\",\"supabase\",\"raspberry-pi\",\"ml\"]};function d(r){let e={blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Project Overview\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"\\u{1F331} Smart IoT Ecosystem\"})}),`\n`,(0,n.jsx)(e.p,{children:\"PhytoPi is a smart IoT ecosystem designed to automate and monitor plant growth in controlled environments. The system integrates hardware sensors, Raspberry Pi control, cloud data management, and mobile/web applications to deliver real-time environmental insights and plant health analytics.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The project's goal is to autonomously sustain a full bean plant growth cycle while providing users with live monitoring, alerts, and predictive analysis through a unified app interface.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F3AF} Key Features\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Environmental Monitoring:\"}),\" Continuous data collection for soil moisture, temperature, humidity, light, and CO\\u2082 sensors\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Secure Cloud Infrastructure:\"}),\" Built on Supabase with Row-Level Security (RLS) for user-specific data isolation\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Cross-Platform Dashboard:\"}),\" Flutter app (Android/iOS/Web) displays real-time readings, charts, and device health\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Alert System:\"}),\" Automated notifications for threshold breaches (e.g., low moisture, high temperature)\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Offline-Resilient Device Agent:\"}),\" Python-based Raspberry Pi agent caches data locally and uploads in batches\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"AI Integration (Phase 2):\"}),\" On-device TensorFlow Lite or cloud ML microservice for plant health inference\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Kiosk Mode:\"}),\" Raspberry Pi can display live dashboards using Chromium in kiosk mode for lab or greenhouse use\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Monetization-Ready Architecture:\"}),\" Stripe integration for subscription tiers and device management\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h1,{children:\"\\u{1F3D7}\\uFE0F Technical Architecture\"}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F527} Hardware Layer\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Raspberry Pi 5\"}),\" + Sensor Array (moisture, temp, humidity, light, CO\\u2082)\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Device Agent:\"}),\" Python + SQLite for local buffering, secure upload to Supabase Edge Functions\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u2601\\uFE0F Backend Infrastructure\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Supabase:\"}),\" PostgreSQL, RLS, Edge Functions, Storage, Auth\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"CI/CD:\"}),\" GitHub Actions for migrations, tests, and deployment\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F4F1} Frontend Applications\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Flutter:\"}),\" Mobile + Web, realtime charts, user settings, notifications\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Kiosk Mode:\"}),\" Raspberry Pi displays live dashboards using Chromium\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F504} Data Flow\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Sensors \\u2192 Pi Agent \\u2192 Edge Function \\u2192 Supabase DB \\u2192 Realtime \\u2192 Mobile/Web UI\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F4C1} Project Structure\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`phytopi/\\r\n\\u251C\\u2500 apps/            # Flutter mobile + web dashboard clients\\r\n\\u251C\\u2500 services/        # pi-agent, simulator, ml microservice\\r\n\\u251C\\u2500 ml/              # training scripts, datasets, exported TFLite models\\r\n\\u251C\\u2500 infra/           # Supabase migrations, edge functions, Docker assets\\r\n\\u251C\\u2500 packages/        # shared DTOs, domain models, utilities\\r\n\\u251C\\u2500 .github/workflows/# CI/CD pipelines\\r\n\\u2514\\u2500 docs/            # requirements, diagrams, statements of work\n`})}),`\n`,(0,n.jsx)(e.h1,{children:\"\\u{1F3AF} Impact & Outcomes\"}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u2705 Achievements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Fully functional MVP\"}),\" achieved within 12 weeks\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Cross-platform app\"}),\" + Raspberry Pi kiosk mode tested with live sensors\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Secure, scalable Supabase backend\"}),\" supporting realtime ingestion and notifications\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Architecture ready\"}),\" for production and future AI health analysis\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F31F} Key Highlights\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"End-to-end IoT system\"}),\" with device onboarding, telemetry, and visualization\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Modular Supabase schema\"}),\" designed for extensibility and manufacturing integration\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Demonstrates strong grasp\"}),\" of IoT, cloud computing, mobile development, and embedded systems\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Deployed internal tests\"}),\" using CI/CD pipelines and Supabase observability tools\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"\\u{1F4A1} Vision Statement\"})}),`\n`,(0,n.jsx)(e.p,{children:\"PhytoPi represents a comprehensive IoT solution that bridges hardware, cloud infrastructure, and user experience to create an intelligent plant monitoring ecosystem. The project demonstrates expertise across the full technology stack while delivering a production-ready system with clear paths for AI integration and commercial scalability.\"}),`\n`]})]})}function h(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(d,{...r})}):d(r)}return S(P);})();\n;return Component;"
        },
        "_id": "projects/phytopi-controlled-environment.mdx",
        "_raw": {
          "sourceFilePath": "projects/phytopi-controlled-environment.mdx",
          "sourceFileName": "phytopi-controlled-environment.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/phytopi-controlled-environment"
        },
        "type": "Project",
        "url": "/projects/phytopi-controlled-environment"
      },
      "documentHash": "1761227399320",
      "hasWarnings": false,
      "documentTypeName": "Project"
    }
  }
}
