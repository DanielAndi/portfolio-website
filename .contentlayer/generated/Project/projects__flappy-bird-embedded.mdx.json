{
  "title": "Reaction-Time Flappy Bird Game (Embedded Systems)",
  "slug": "flappy-bird-embedded",
  "summary": "Real-time Flappy Bird-style game implemented on Terasic DE10-Standard SoC FPGA board, demonstrating embedded hardware/software co-design with C, Verilog, and AXI-Lite communication.",
  "role": "Embedded Systems Developer",
  "dates": "January 2024 – March 2024",
  "tech": [
    "C (HPS)",
    "Verilog",
    "Quartus Prime",
    "Platform Designer (Qsys)",
    "GCC Toolchain",
    "AXI-Lite",
    "SPI Communication"
  ],
  "status": "In Development",
  "heroImage": "/images/projects/FlappyBirdDE10LCDv1.jpg",
  "repoUrl": "https://github.com/DanielAndi/FlappyBirdDE10LCDv1",
  "featured": true,
  "tags": [
    "embedded-systems",
    "fpga",
    "verilog",
    "c",
    "hardware-design",
    "real-time-systems\r"
  ],
  "body": {
    "raw": "\r\n# Project Overview\r\n\r\n> **🎮 Embedded Gaming System**\r\n> \r\n> This project implements a reaction-based \"Flappy Bird\"–style game on the Terasic DE10-Standard SoC FPGA board, demonstrating embedded hardware/software co-design. The game challenges players to control a bird navigating through dynamically generated obstacles using physical push buttons, switches, and real-time visual feedback.\r\n> \r\n> The system showcases the integration of real-time embedded software, digital logic design, and system-on-chip architecture, serving as a capstone example of embedded co-design principles.\r\n\r\n## 🎯 Key Features\r\n\r\n- **Hardware/Software Co-Design:** HPS executes game logic while FPGA manages low-level I/O operations\r\n\r\n- **Real-Time Performance:** 60 Hz gameplay loop with consistent frame rate and deterministic timing\r\n\r\n- **Multi-Domain Communication:** AXI-Lite register interface enables seamless HPS↔FPGA synchronization\r\n\r\n- **Hardware Input Processing:** Debounced inputs, LED indicators, and 7-segment display updates\r\n\r\n- **Visual Feedback System:** 128×64 SPI LCD display with PWM-based backlight control\r\n\r\n- **Collision Detection:** Real-time physics with scoring and adjustable difficulty via board switches\r\n\r\n---\r\n\r\n# 🏗️ Technical Architecture\r\n\r\n## 🔧 Hardware Platform\r\n\r\n- **Terasic DE10-Standard:** Intel Cyclone V SoC FPGA with dual-core ARM Cortex-A9 HPS\r\n- **Display:** 128×64 SPI LCD for game rendering\r\n- **Input/Output:** Push buttons, slide switches, user LEDs, 7-segment display\r\n\r\n## 💻 Software Stack\r\n\r\n- **HPS Domain:** C programming for game logic, physics, and rendering loop\r\n- **FPGA Domain:** Verilog for low-level I/O management and register interface\r\n- **Development Tools:** Quartus Prime, Platform Designer (Qsys), GCC toolchain\r\n\r\n## 🔄 System Architecture\r\n\r\n```\r\nHPS (C) ←→ AXI-Lite Bridge ←→ FPGA (Verilog)\r\n    ↓                              ↓\r\nGame Logic & Physics          I/O Management\r\nRendering Loop (60Hz)         Input Debouncing\r\nSPI LCD Output               LED Control\r\n                           7-Segment Display\r\n                           PWM Backlight\r\n```\r\n\r\n## 📡 Communication Protocol\r\n\r\n- **Shared Registers:** Synchronized game states between HPS and FPGA domains\r\n- **AXI-Lite Interface:** Low-latency communication for real-time control\r\n- **SPI Communication:** High-speed LCD frame buffer updates\r\n\r\n---\r\n\r\n# 🎮 Game Implementation\r\n\r\n## 🎯 Core Gameplay\r\n\r\n- **Reaction-Based Control:** Player uses push buttons to control bird movement\r\n- **Dynamic Obstacles:** Procedurally generated pipes with adjustable difficulty\r\n- **Real-Time Physics:** Collision detection and scoring system\r\n- **Visual Feedback:** LED indicators and 7-segment display for game state\r\n\r\n## ⚡ Performance Optimization\r\n\r\n- **Hardware-Timed Loop:** Consistent 60 Hz frame rate with deterministic timing\r\n- **Efficient Rendering:** Optimized SPI communication for smooth graphics\r\n- **Low-Latency Input:** Hardware-based input debouncing for responsive controls\r\n\r\n## 🧪 Testing & Validation\r\n\r\n- **Structured Test Plan:** Comprehensive validation of HPS↔FPGA communication\r\n- **Frame Integrity Testing:** Verification of SPI rendering and display output\r\n- **Collision Logic Testing:** Systematic validation of game physics\r\n- **System Responsiveness:** Performance testing under various load conditions\r\n\r\n---\r\n\r\n# 🎯 Impact & Outcomes\r\n\r\n## ✅ Technical Achievements\r\n\r\n- **Successful Integration:** Seamless HPS and FPGA domain communication via AXI-Lite\r\n- **Real-Time Performance:** Achieved consistent 60 Hz gameplay with hardware timing\r\n- **Hardware Optimization:** Efficient I/O management with debounced inputs and PWM control\r\n- **System Reliability:** Robust error handling and deterministic timing across domains\r\n\r\n## 🌟 Key Learning Outcomes\r\n\r\n- **FPGA Development:** Digital logic design and Verilog programming for embedded systems\r\n- **HPS Interfacing:** ARM Cortex-A9 programming and system integration\r\n- **AXI Bridge Communication:** Low-level hardware communication protocols\r\n- **Embedded Co-Design:** Integration of software and hardware domains in SoC architecture\r\n- **Real-Time Systems:** Deterministic timing and performance optimization for embedded applications\r\n\r\n## 🔧 Technical Skills Demonstrated\r\n\r\n- **Hardware Description Languages:** Verilog for FPGA logic implementation\r\n- **Embedded C Programming:** Real-time systems programming on ARM architecture\r\n- **System Integration:** SoC design and inter-domain communication\r\n- **Hardware Debugging:** Low-level system testing and validation methodologies\r\n\r\n---\r\n\r\n> **💡 Project Significance**\r\n> \r\n> This embedded systems project demonstrates mastery of hardware/software co-design principles, showcasing the integration of real-time embedded software with digital logic design. The Flappy Bird implementation serves as a comprehensive example of SoC architecture, AXI communication protocols, and embedded systems development, highlighting expertise in FPGA programming, HPS interfacing, and real-time system optimization.\r\n",
    "code": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),P=(i,e)=>{for(var r in e)l(i,r,{get:e[r],enumerable:!0})},a=(i,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!y.call(i,t)&&t!==r&&l(i,t,{get:()=>e[t],enumerable:!(o=g(e,t))||o.enumerable});return i};var b=(i,e,r)=>(r=i!=null?m(u(i)):{},a(e||!i||!i.__esModule?l(r,\"default\",{value:i,enumerable:!0}):r,i)),w=i=>a(l({},\"__esModule\",{value:!0}),i);var c=f((I,d)=>{d.exports=_jsx_runtime});var C={};P(C,{default:()=>h,frontmatter:()=>S});var n=b(c()),S={slug:\"flappy-bird-embedded\",title:\"Reaction-Time Flappy Bird Game (Embedded Systems)\",summary:\"Real-time Flappy Bird-style game implemented on Terasic DE10-Standard SoC FPGA board, demonstrating embedded hardware/software co-design with C, Verilog, and AXI-Lite communication.\",role:\"Embedded Systems Developer\",dates:\"January 2024 \\u2013 March 2024\",tech:[\"C (HPS)\",\"Verilog\",\"Quartus Prime\",\"Platform Designer (Qsys)\",\"GCC Toolchain\",\"AXI-Lite\",\"SPI Communication\"],status:\"In Development\",heroImage:\"/images/projects/FlappyBirdDE10LCDv1.jpg\",repoUrl:\"https://github.com/DanielAndi/FlappyBirdDE10LCDv1\",featured:!0,tags:[\"embedded-systems\",\"fpga\",\"verilog\",\"c\",\"hardware-design\",\"real-time-systems\"]};function s(i){let e={blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Project Overview\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"\\u{1F3AE} Embedded Gaming System\"})}),`\n`,(0,n.jsx)(e.p,{children:'This project implements a reaction-based \"Flappy Bird\"\\u2013style game on the Terasic DE10-Standard SoC FPGA board, demonstrating embedded hardware/software co-design. The game challenges players to control a bird navigating through dynamically generated obstacles using physical push buttons, switches, and real-time visual feedback.'}),`\n`,(0,n.jsx)(e.p,{children:\"The system showcases the integration of real-time embedded software, digital logic design, and system-on-chip architecture, serving as a capstone example of embedded co-design principles.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F3AF} Key Features\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Hardware/Software Co-Design:\"}),\" HPS executes game logic while FPGA manages low-level I/O operations\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Real-Time Performance:\"}),\" 60 Hz gameplay loop with consistent frame rate and deterministic timing\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Multi-Domain Communication:\"}),\" AXI-Lite register interface enables seamless HPS\\u2194FPGA synchronization\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Hardware Input Processing:\"}),\" Debounced inputs, LED indicators, and 7-segment display updates\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Visual Feedback System:\"}),\" 128\\xD764 SPI LCD display with PWM-based backlight control\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Collision Detection:\"}),\" Real-time physics with scoring and adjustable difficulty via board switches\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h1,{children:\"\\u{1F3D7}\\uFE0F Technical Architecture\"}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F527} Hardware Platform\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Terasic DE10-Standard:\"}),\" Intel Cyclone V SoC FPGA with dual-core ARM Cortex-A9 HPS\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Display:\"}),\" 128\\xD764 SPI LCD for game rendering\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Input/Output:\"}),\" Push buttons, slide switches, user LEDs, 7-segment display\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F4BB} Software Stack\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"HPS Domain:\"}),\" C programming for game logic, physics, and rendering loop\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"FPGA Domain:\"}),\" Verilog for low-level I/O management and register interface\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Development Tools:\"}),\" Quartus Prime, Platform Designer (Qsys), GCC toolchain\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F504} System Architecture\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`HPS (C) \\u2190\\u2192 AXI-Lite Bridge \\u2190\\u2192 FPGA (Verilog)\\r\n    \\u2193                              \\u2193\\r\nGame Logic & Physics          I/O Management\\r\nRendering Loop (60Hz)         Input Debouncing\\r\nSPI LCD Output               LED Control\\r\n                           7-Segment Display\\r\n                           PWM Backlight\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F4E1} Communication Protocol\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Shared Registers:\"}),\" Synchronized game states between HPS and FPGA domains\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AXI-Lite Interface:\"}),\" Low-latency communication for real-time control\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"SPI Communication:\"}),\" High-speed LCD frame buffer updates\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h1,{children:\"\\u{1F3AE} Game Implementation\"}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F3AF} Core Gameplay\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Reaction-Based Control:\"}),\" Player uses push buttons to control bird movement\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Dynamic Obstacles:\"}),\" Procedurally generated pipes with adjustable difficulty\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Real-Time Physics:\"}),\" Collision detection and scoring system\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Visual Feedback:\"}),\" LED indicators and 7-segment display for game state\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u26A1 Performance Optimization\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Hardware-Timed Loop:\"}),\" Consistent 60 Hz frame rate with deterministic timing\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Efficient Rendering:\"}),\" Optimized SPI communication for smooth graphics\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Low-Latency Input:\"}),\" Hardware-based input debouncing for responsive controls\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F9EA} Testing & Validation\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Structured Test Plan:\"}),\" Comprehensive validation of HPS\\u2194FPGA communication\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Frame Integrity Testing:\"}),\" Verification of SPI rendering and display output\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Collision Logic Testing:\"}),\" Systematic validation of game physics\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"System Responsiveness:\"}),\" Performance testing under various load conditions\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h1,{children:\"\\u{1F3AF} Impact & Outcomes\"}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u2705 Technical Achievements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Successful Integration:\"}),\" Seamless HPS and FPGA domain communication via AXI-Lite\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Real-Time Performance:\"}),\" Achieved consistent 60 Hz gameplay with hardware timing\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Hardware Optimization:\"}),\" Efficient I/O management with debounced inputs and PWM control\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"System Reliability:\"}),\" Robust error handling and deterministic timing across domains\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F31F} Key Learning Outcomes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"FPGA Development:\"}),\" Digital logic design and Verilog programming for embedded systems\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"HPS Interfacing:\"}),\" ARM Cortex-A9 programming and system integration\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"AXI Bridge Communication:\"}),\" Low-level hardware communication protocols\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Embedded Co-Design:\"}),\" Integration of software and hardware domains in SoC architecture\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Real-Time Systems:\"}),\" Deterministic timing and performance optimization for embedded applications\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u{1F527} Technical Skills Demonstrated\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Hardware Description Languages:\"}),\" Verilog for FPGA logic implementation\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Embedded C Programming:\"}),\" Real-time systems programming on ARM architecture\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"System Integration:\"}),\" SoC design and inter-domain communication\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Hardware Debugging:\"}),\" Low-level system testing and validation methodologies\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"\\u{1F4A1} Project Significance\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This embedded systems project demonstrates mastery of hardware/software co-design principles, showcasing the integration of real-time embedded software with digital logic design. The Flappy Bird implementation serves as a comprehensive example of SoC architecture, AXI communication protocols, and embedded systems development, highlighting expertise in FPGA programming, HPS interfacing, and real-time system optimization.\"}),`\n`]})]})}function h(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(s,{...i})}):s(i)}return w(C);})();\n;return Component;"
  },
  "_id": "projects/flappy-bird-embedded.mdx",
  "_raw": {
    "sourceFilePath": "projects/flappy-bird-embedded.mdx",
    "sourceFileName": "flappy-bird-embedded.mdx",
    "sourceFileDir": "projects",
    "contentType": "mdx",
    "flattenedPath": "projects/flappy-bird-embedded"
  },
  "type": "Project",
  "url": "/projects/flappy-bird-embedded"
}